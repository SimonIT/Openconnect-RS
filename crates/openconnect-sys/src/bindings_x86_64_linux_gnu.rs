/* automatically generated by rust-bindgen 0.69.4 */

pub const DEFAULT_VPNCSCRIPT: &[u8; 14] = b"./vpnc-script\0";
pub const ENABLE_NLS: u32 = 1;
pub const HAVE_ALLOCA_H: u32 = 1;
pub const HAVE_ASPRINTF: u32 = 1;
pub const HAVE_BIO_METH_FREE: u32 = 1;
pub const HAVE_BUILTIN_CLZ: u32 = 1;
pub const HAVE_DLFCN_H: u32 = 1;
pub const HAVE_DTLS: u32 = 1;
pub const HAVE_DTLS12: u32 = 1;
pub const HAVE_ENGINE: u32 = 1;
pub const HAVE_EPOLL: u32 = 1;
pub const HAVE_ESP: u32 = 1;
pub const HAVE_EXPLICIT_BZERO: u32 = 1;
pub const HAVE_GETLINE: u32 = 1;
pub const HAVE_HPKE_SUPPORT: u32 = 1;
pub const HAVE_ICONV: u32 = 1;
pub const HAVE_INET_ATON: u32 = 1;
pub const HAVE_IPV6_PATHMTU: u32 = 1;
pub const HAVE_JSON: u32 = 1;
pub const HAVE_LOCALTIME_R: u32 = 1;
pub const HAVE_NL_LANGINFO: u32 = 1;
pub const HAVE_POSIX_SPAWN: u32 = 1;
pub const HAVE_SSL_CIPHER_FIND: u32 = 1;
pub const HAVE_SSL_CTX_PROTOVER: u32 = 1;
pub const HAVE_STATFS: u32 = 1;
pub const HAVE_STRCASESTR: u32 = 1;
pub const HAVE_STRCHRNUL: u32 = 1;
pub const HAVE_STRNDUP: u32 = 1;
pub const HAVE_VASPRINTF: u32 = 1;
pub const HAVE_VHOST: u32 = 1;
pub const IF_TUN_HDR: &[u8; 15] = b"linux/if_tun.h\0";
pub const LT_OBJDIR: &[u8; 7] = b".libs/\0";
pub const OPENCONNECT_OPENSSL: u32 = 1;
pub const OPENSSL_SUPPRESS_DEPRECATED: u32 = 1;
pub const PACKAGE: &[u8; 12] = b"openconnect\0";
pub const PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
pub const PACKAGE_NAME: &[u8; 12] = b"openconnect\0";
pub const PACKAGE_STRING: &[u8; 17] = b"openconnect 9.12\0";
pub const PACKAGE_TARNAME: &[u8; 12] = b"openconnect\0";
pub const PACKAGE_URL: &[u8; 1] = b"\0";
pub const PACKAGE_VERSION: &[u8; 5] = b"9.12\0";
pub const VERSION: &[u8; 5] = b"9.12\0";
pub const _GNU_SOURCE: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const OPENCONNECT_API_VERSION_MAJOR: u32 = 5;
pub const OPENCONNECT_API_VERSION_MINOR: u32 = 9;
pub const OC_PROTO_PROXY: u32 = 1;
pub const OC_PROTO_CSD: u32 = 2;
pub const OC_PROTO_AUTH_CERT: u32 = 4;
pub const OC_PROTO_AUTH_OTP: u32 = 8;
pub const OC_PROTO_AUTH_STOKEN: u32 = 16;
pub const OC_PROTO_PERIODIC_TROJAN: u32 = 32;
pub const OC_PROTO_HIDDEN: u32 = 64;
pub const OC_PROTO_AUTH_MCA: u32 = 128;
pub const OC_FORM_OPT_TEXT: u32 = 1;
pub const OC_FORM_OPT_PASSWORD: u32 = 2;
pub const OC_FORM_OPT_SELECT: u32 = 3;
pub const OC_FORM_OPT_HIDDEN: u32 = 4;
pub const OC_FORM_OPT_TOKEN: u32 = 5;
pub const OC_FORM_OPT_SSO_TOKEN: u32 = 6;
pub const OC_FORM_OPT_SSO_USER: u32 = 7;
pub const OC_FORM_RESULT_ERR: i32 = -1;
pub const OC_FORM_RESULT_OK: u32 = 0;
pub const OC_FORM_RESULT_CANCELLED: u32 = 1;
pub const OC_FORM_RESULT_NEWGROUP: u32 = 2;
pub const OC_FORM_OPT_IGNORE: u32 = 1;
pub const OC_FORM_OPT_NUMERIC: u32 = 2;
pub const PRG_ERR: u32 = 0;
pub const PRG_INFO: u32 = 1;
pub const PRG_DEBUG: u32 = 2;
pub const PRG_TRACE: u32 = 3;
pub const OC_CMD_CANCEL: u8 = 120u8;
pub const OC_CMD_PAUSE: u8 = 112u8;
pub const OC_CMD_DETACH: u8 = 100u8;
pub const OC_CMD_STATS: u8 = 115u8;
pub const RECONNECT_INTERVAL_MIN: u32 = 10;
pub const RECONNECT_INTERVAL_MAX: u32 = 100;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type useconds_t = __useconds_t;
pub type suseconds_t = __suseconds_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_rwlock_arch_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    const UNINIT: ::std::mem::MaybeUninit<__once_flag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oc_vpn_proto {
    pub name: *const ::std::os::raw::c_char,
    pub pretty_name: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_oc_vpn_proto() {
    const UNINIT: ::std::mem::MaybeUninit<oc_vpn_proto> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<oc_vpn_proto>(),
        32usize,
        concat!("Size of: ", stringify!(oc_vpn_proto))
    );
    assert_eq!(
        ::std::mem::align_of::<oc_vpn_proto>(),
        8usize,
        concat!("Alignment of ", stringify!(oc_vpn_proto))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_vpn_proto),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pretty_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_vpn_proto),
            "::",
            stringify!(pretty_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_vpn_proto),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_vpn_proto),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oc_form_opt {
    pub next: *mut oc_form_opt,
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub label: *mut ::std::os::raw::c_char,
    pub _value: *mut ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_uint,
    pub reserved: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_oc_form_opt() {
    const UNINIT: ::std::mem::MaybeUninit<oc_form_opt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<oc_form_opt>(),
        56usize,
        concat!("Size of: ", stringify!(oc_form_opt))
    );
    assert_eq!(
        ::std::mem::align_of::<oc_form_opt>(),
        8usize,
        concat!("Alignment of ", stringify!(oc_form_opt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_form_opt),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_form_opt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_form_opt),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_form_opt),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._value) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_form_opt),
            "::",
            stringify!(_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_form_opt),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_form_opt),
            "::",
            stringify!(reserved)
        )
    );
}
extern "C" {
    pub fn openconnect_set_option_value(
        opt: *mut oc_form_opt,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oc_choice {
    pub name: *mut ::std::os::raw::c_char,
    pub label: *mut ::std::os::raw::c_char,
    pub auth_type: *mut ::std::os::raw::c_char,
    pub override_name: *mut ::std::os::raw::c_char,
    pub override_label: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_oc_choice() {
    const UNINIT: ::std::mem::MaybeUninit<oc_choice> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<oc_choice>(),
        40usize,
        concat!("Size of: ", stringify!(oc_choice))
    );
    assert_eq!(
        ::std::mem::align_of::<oc_choice>(),
        8usize,
        concat!("Alignment of ", stringify!(oc_choice))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_choice),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_choice),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auth_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_choice),
            "::",
            stringify!(auth_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).override_name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_choice),
            "::",
            stringify!(override_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).override_label) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_choice),
            "::",
            stringify!(override_label)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oc_form_opt_select {
    pub form: oc_form_opt,
    pub nr_choices: ::std::os::raw::c_int,
    pub choices: *mut *mut oc_choice,
}
#[test]
fn bindgen_test_layout_oc_form_opt_select() {
    const UNINIT: ::std::mem::MaybeUninit<oc_form_opt_select> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<oc_form_opt_select>(),
        72usize,
        concat!("Size of: ", stringify!(oc_form_opt_select))
    );
    assert_eq!(
        ::std::mem::align_of::<oc_form_opt_select>(),
        8usize,
        concat!("Alignment of ", stringify!(oc_form_opt_select))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).form) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_form_opt_select),
            "::",
            stringify!(form)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr_choices) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_form_opt_select),
            "::",
            stringify!(nr_choices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).choices) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_form_opt_select),
            "::",
            stringify!(choices)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oc_auth_form {
    pub banner: *mut ::std::os::raw::c_char,
    pub message: *mut ::std::os::raw::c_char,
    pub error: *mut ::std::os::raw::c_char,
    pub auth_id: *mut ::std::os::raw::c_char,
    pub method: *mut ::std::os::raw::c_char,
    pub action: *mut ::std::os::raw::c_char,
    pub opts: *mut oc_form_opt,
    pub authgroup_opt: *mut oc_form_opt_select,
    pub authgroup_selection: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_oc_auth_form() {
    const UNINIT: ::std::mem::MaybeUninit<oc_auth_form> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<oc_auth_form>(),
        72usize,
        concat!("Size of: ", stringify!(oc_auth_form))
    );
    assert_eq!(
        ::std::mem::align_of::<oc_auth_form>(),
        8usize,
        concat!("Alignment of ", stringify!(oc_auth_form))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).banner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_auth_form),
            "::",
            stringify!(banner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_auth_form),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_auth_form),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auth_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_auth_form),
            "::",
            stringify!(auth_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_auth_form),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_auth_form),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opts) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_auth_form),
            "::",
            stringify!(opts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).authgroup_opt) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_auth_form),
            "::",
            stringify!(authgroup_opt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).authgroup_selection) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_auth_form),
            "::",
            stringify!(authgroup_selection)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oc_split_include {
    pub route: *const ::std::os::raw::c_char,
    pub next: *mut oc_split_include,
}
#[test]
fn bindgen_test_layout_oc_split_include() {
    const UNINIT: ::std::mem::MaybeUninit<oc_split_include> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<oc_split_include>(),
        16usize,
        concat!("Size of: ", stringify!(oc_split_include))
    );
    assert_eq!(
        ::std::mem::align_of::<oc_split_include>(),
        8usize,
        concat!("Alignment of ", stringify!(oc_split_include))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).route) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_split_include),
            "::",
            stringify!(route)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_split_include),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oc_ip_info {
    pub addr: *const ::std::os::raw::c_char,
    pub netmask: *const ::std::os::raw::c_char,
    pub addr6: *const ::std::os::raw::c_char,
    pub netmask6: *const ::std::os::raw::c_char,
    pub dns: [*const ::std::os::raw::c_char; 3usize],
    pub nbns: [*const ::std::os::raw::c_char; 3usize],
    pub domain: *const ::std::os::raw::c_char,
    pub proxy_pac: *const ::std::os::raw::c_char,
    pub mtu: ::std::os::raw::c_int,
    pub split_dns: *mut oc_split_include,
    pub split_includes: *mut oc_split_include,
    pub split_excludes: *mut oc_split_include,
    pub gateway_addr: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_oc_ip_info() {
    const UNINIT: ::std::mem::MaybeUninit<oc_ip_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<oc_ip_info>(),
        136usize,
        concat!("Size of: ", stringify!(oc_ip_info))
    );
    assert_eq!(
        ::std::mem::align_of::<oc_ip_info>(),
        8usize,
        concat!("Alignment of ", stringify!(oc_ip_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_ip_info),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).netmask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_ip_info),
            "::",
            stringify!(netmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr6) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_ip_info),
            "::",
            stringify!(addr6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).netmask6) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_ip_info),
            "::",
            stringify!(netmask6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dns) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_ip_info),
            "::",
            stringify!(dns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nbns) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_ip_info),
            "::",
            stringify!(nbns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).domain) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_ip_info),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proxy_pac) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_ip_info),
            "::",
            stringify!(proxy_pac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtu) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_ip_info),
            "::",
            stringify!(mtu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).split_dns) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_ip_info),
            "::",
            stringify!(split_dns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).split_includes) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_ip_info),
            "::",
            stringify!(split_includes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).split_excludes) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_ip_info),
            "::",
            stringify!(split_excludes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gateway_addr) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_ip_info),
            "::",
            stringify!(gateway_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oc_vpn_option {
    pub option: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
    pub next: *mut oc_vpn_option,
}
#[test]
fn bindgen_test_layout_oc_vpn_option() {
    const UNINIT: ::std::mem::MaybeUninit<oc_vpn_option> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<oc_vpn_option>(),
        24usize,
        concat!("Size of: ", stringify!(oc_vpn_option))
    );
    assert_eq!(
        ::std::mem::align_of::<oc_vpn_option>(),
        8usize,
        concat!("Alignment of ", stringify!(oc_vpn_option))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).option) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_vpn_option),
            "::",
            stringify!(option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_vpn_option),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_vpn_option),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oc_stats {
    pub tx_pkts: u64,
    pub tx_bytes: u64,
    pub rx_pkts: u64,
    pub rx_bytes: u64,
}
#[test]
fn bindgen_test_layout_oc_stats() {
    const UNINIT: ::std::mem::MaybeUninit<oc_stats> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<oc_stats>(),
        32usize,
        concat!("Size of: ", stringify!(oc_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<oc_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(oc_stats))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tx_pkts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_stats),
            "::",
            stringify!(tx_pkts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tx_bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_stats),
            "::",
            stringify!(tx_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rx_pkts) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_stats),
            "::",
            stringify!(rx_pkts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rx_bytes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_stats),
            "::",
            stringify!(rx_bytes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oc_cert {
    pub der_len: ::std::os::raw::c_int,
    pub der_data: *mut ::std::os::raw::c_uchar,
    pub reserved: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_oc_cert() {
    const UNINIT: ::std::mem::MaybeUninit<oc_cert> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<oc_cert>(),
        24usize,
        concat!("Size of: ", stringify!(oc_cert))
    );
    assert_eq!(
        ::std::mem::align_of::<oc_cert>(),
        8usize,
        concat!("Alignment of ", stringify!(oc_cert))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).der_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_cert),
            "::",
            stringify!(der_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).der_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_cert),
            "::",
            stringify!(der_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_cert),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oc_webview_result {
    pub uri: *const ::std::os::raw::c_char,
    pub cookies: *mut *const ::std::os::raw::c_char,
    pub headers: *mut *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_oc_webview_result() {
    const UNINIT: ::std::mem::MaybeUninit<oc_webview_result> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<oc_webview_result>(),
        24usize,
        concat!("Size of: ", stringify!(oc_webview_result))
    );
    assert_eq!(
        ::std::mem::align_of::<oc_webview_result>(),
        8usize,
        concat!("Alignment of ", stringify!(oc_webview_result))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uri) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_webview_result),
            "::",
            stringify!(uri)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cookies) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_webview_result),
            "::",
            stringify!(cookies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headers) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(oc_webview_result),
            "::",
            stringify!(headers)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct openconnect_info {
    _unused: [u8; 0],
}
pub const oc_token_mode_t_OC_TOKEN_MODE_NONE: oc_token_mode_t = 0;
pub const oc_token_mode_t_OC_TOKEN_MODE_STOKEN: oc_token_mode_t = 1;
pub const oc_token_mode_t_OC_TOKEN_MODE_TOTP: oc_token_mode_t = 2;
pub const oc_token_mode_t_OC_TOKEN_MODE_HOTP: oc_token_mode_t = 3;
pub const oc_token_mode_t_OC_TOKEN_MODE_YUBIOATH: oc_token_mode_t = 4;
pub const oc_token_mode_t_OC_TOKEN_MODE_OIDC: oc_token_mode_t = 5;
pub type oc_token_mode_t = ::std::os::raw::c_uint;
pub const oc_compression_mode_t_OC_COMPRESSION_MODE_NONE: oc_compression_mode_t = 0;
pub const oc_compression_mode_t_OC_COMPRESSION_MODE_STATELESS: oc_compression_mode_t = 1;
pub const oc_compression_mode_t_OC_COMPRESSION_MODE_ALL: oc_compression_mode_t = 2;
pub type oc_compression_mode_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn openconnect_set_csd_environ(
        vpninfo: *mut openconnect_info,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_get_peer_cert_hash(
        vpninfo: *mut openconnect_info,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openconnect_check_peer_cert_hash(
        vpninfo: *mut openconnect_info,
        old_hash: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_get_peer_cert_details(
        vpninfo: *mut openconnect_info,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn openconnect_get_peer_cert_DER(
        vpninfo: *mut openconnect_info,
        buf: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_free_cert_info(
        vpninfo: *mut openconnect_info,
        buf: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn openconnect_get_peer_cert_chain(
        vpninfo: *mut openconnect_info,
        chain: *mut *mut oc_cert,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_free_peer_cert_chain(vpninfo: *mut openconnect_info, chain: *mut oc_cert);
}
extern "C" {
    pub fn openconnect_set_http_auth(
        vpninfo: *mut openconnect_info,
        methods: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_set_proxy_auth(
        vpninfo: *mut openconnect_info,
        methods: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_set_http_proxy(
        vpninfo: *mut openconnect_info,
        proxy: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_set_useragent(
        vpninfo: *mut openconnect_info,
        useragent: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_passphrase_from_fsid(
        vpninfo: *mut openconnect_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_obtain_cookie(vpninfo: *mut openconnect_info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_init_ssl() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_get_cstp_cipher(
        arg1: *mut openconnect_info,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openconnect_get_dtls_cipher(
        arg1: *mut openconnect_info,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openconnect_get_cstp_compression(
        arg1: *mut openconnect_info,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openconnect_get_dtls_compression(
        arg1: *mut openconnect_info,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openconnect_get_connect_url(
        arg1: *mut openconnect_info,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openconnect_get_hostname(arg1: *mut openconnect_info) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openconnect_get_dnsname(arg1: *mut openconnect_info) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openconnect_set_hostname(
        arg1: *mut openconnect_info,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_get_urlpath(arg1: *mut openconnect_info) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn openconnect_set_urlpath(
        arg1: *mut openconnect_info,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_set_localname(
        arg1: *mut openconnect_info,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_set_sni(
        arg1: *mut openconnect_info,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type openconnect_lock_token_vfn = ::std::option::Option<
    unsafe extern "C" fn(tokdata: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type openconnect_unlock_token_vfn = ::std::option::Option<
    unsafe extern "C" fn(
        tokdata: *mut ::std::os::raw::c_void,
        new_tok: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn openconnect_set_token_callbacks(
        arg1: *mut openconnect_info,
        tokdata: *mut ::std::os::raw::c_void,
        arg2: openconnect_lock_token_vfn,
        arg3: openconnect_unlock_token_vfn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_set_token_mode(
        arg1: *mut openconnect_info,
        arg2: oc_token_mode_t,
        token_str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_set_stoken_mode(
        arg1: *mut openconnect_info,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_set_compression_mode(
        arg1: *mut openconnect_info,
        arg2: oc_compression_mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_set_xmlsha1(
        arg1: *mut openconnect_info,
        arg2: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn openconnect_set_cafile(
        arg1: *mut openconnect_info,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_set_system_trust(
        vpninfo: *mut openconnect_info,
        val: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn openconnect_setup_csd(
        arg1: *mut openconnect_info,
        arg2: uid_t,
        silent: ::std::os::raw::c_int,
        wrapper: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_set_xmlpost(arg1: *mut openconnect_info, enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn openconnect_set_reported_os(
        arg1: *mut openconnect_info,
        os: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_set_version_string(
        vpninfo: *mut openconnect_info,
        version_string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_set_mobile_info(
        vpninfo: *mut openconnect_info,
        mobile_platform_version: *const ::std::os::raw::c_char,
        mobile_device_type: *const ::std::os::raw::c_char,
        mobile_device_uniqueid: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_set_client_cert(
        arg1: *mut openconnect_info,
        cert: *const ::std::os::raw::c_char,
        sslkey: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_set_key_password(
        vpninfo: *mut openconnect_info,
        pass: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Multiple certificate authentication (MCA): the client cert _and_ the\n mca_cert are used for authentication. The mca_cert is used to sign a\n challenge sent by the server."]
    pub fn openconnect_set_mca_cert(
        arg1: *mut openconnect_info,
        cert: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_set_mca_key_password(
        vpninfo: *mut openconnect_info,
        pass: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_get_ifname(arg1: *mut openconnect_info) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openconnect_set_reqmtu(arg1: *mut openconnect_info, reqmtu: ::std::os::raw::c_int);
}
extern "C" {
    pub fn openconnect_set_dpd(arg1: *mut openconnect_info, min_seconds: ::std::os::raw::c_int);
}
extern "C" {
    pub fn openconnect_set_trojan_interval(
        arg1: *mut openconnect_info,
        seconds: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn openconnect_get_idle_timeout(arg1: *mut openconnect_info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_get_auth_expiration(arg1: *mut openconnect_info) -> time_t;
}
extern "C" {
    pub fn openconnect_get_ip_info(
        arg1: *mut openconnect_info,
        info: *mut *const oc_ip_info,
        cstp_options: *mut *const oc_vpn_option,
        dtls_options: *mut *const oc_vpn_option,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_get_port(arg1: *mut openconnect_info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_get_cookie(arg1: *mut openconnect_info) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openconnect_set_cookie(
        arg1: *mut openconnect_info,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_clear_cookie(arg1: *mut openconnect_info);
}
extern "C" {
    pub fn openconnect_disable_ipv6(vpninfo: *mut openconnect_info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_disable_dtls(vpninfo: *mut openconnect_info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_reset_ssl(vpninfo: *mut openconnect_info);
}
extern "C" {
    pub fn openconnect_parse_url(
        vpninfo: *mut openconnect_info,
        url: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_set_cert_expiry_warning(
        vpninfo: *mut openconnect_info,
        seconds: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn openconnect_set_pfs(vpninfo: *mut openconnect_info, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn openconnect_set_allow_insecure_crypto(
        vpninfo: *mut openconnect_info,
        val: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_set_cancel_fd(vpninfo: *mut openconnect_info, fd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn openconnect_setup_cmd_pipe(vpninfo: *mut openconnect_info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_get_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openconnect_make_cstp_connection(
        vpninfo: *mut openconnect_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_setup_tun_device(
        vpninfo: *mut openconnect_info,
        vpnc_script: *const ::std::os::raw::c_char,
        ifname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_setup_tun_script(
        vpninfo: *mut openconnect_info,
        tun_script: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_setup_tun_fd(
        vpninfo: *mut openconnect_info,
        tun_fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_setup_dtls(
        vpninfo: *mut openconnect_info,
        dtls_attempt_period: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_mainloop(
        vpninfo: *mut openconnect_info,
        reconnect_timeout: ::std::os::raw::c_int,
        reconnect_interval: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type openconnect_validate_peer_cert_vfn = ::std::option::Option<
    unsafe extern "C" fn(
        privdata: *mut ::std::os::raw::c_void,
        reason: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type openconnect_write_new_config_vfn = ::std::option::Option<
    unsafe extern "C" fn(
        privdata: *mut ::std::os::raw::c_void,
        buf: *const ::std::os::raw::c_char,
        buflen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type openconnect_process_auth_form_vfn = ::std::option::Option<
    unsafe extern "C" fn(
        privdata: *mut ::std::os::raw::c_void,
        form: *mut oc_auth_form,
    ) -> ::std::os::raw::c_int,
>;
pub type openconnect_progress_vfn = ::std::option::Option<
    unsafe extern "C" fn(
        privdata: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ),
>;
extern "C" {
    pub fn openconnect_vpninfo_new(
        useragent: *const ::std::os::raw::c_char,
        arg1: openconnect_validate_peer_cert_vfn,
        arg2: openconnect_write_new_config_vfn,
        arg3: openconnect_process_auth_form_vfn,
        arg4: openconnect_progress_vfn,
        privdata: *mut ::std::os::raw::c_void,
    ) -> *mut openconnect_info;
}
extern "C" {
    pub fn openconnect_vpninfo_free(vpninfo: *mut openconnect_info);
}
pub type openconnect_open_webview_vfn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut openconnect_info,
        uri: *const ::std::os::raw::c_char,
        privdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn openconnect_set_webview_callback(
        vpninfo: *mut openconnect_info,
        arg1: openconnect_open_webview_vfn,
    );
}
extern "C" {
    pub fn openconnect_webview_load_changed(
        vpninfo: *mut openconnect_info,
        result: *const oc_webview_result,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_set_external_browser_callback(
        vpninfo: *mut openconnect_info,
        arg1: openconnect_open_webview_vfn,
    );
}
pub type openconnect_protect_socket_vfn = ::std::option::Option<
    unsafe extern "C" fn(privdata: *mut ::std::os::raw::c_void, fd: ::std::os::raw::c_int),
>;
extern "C" {
    pub fn openconnect_set_protect_socket_handler(
        vpninfo: *mut openconnect_info,
        protect_socket: openconnect_protect_socket_vfn,
    );
}
extern "C" {
    pub fn openconnect_set_loglevel(vpninfo: *mut openconnect_info, level: ::std::os::raw::c_int);
}
extern "C" {
    pub fn openconnect_set_pass_tos(vpninfo: *mut openconnect_info, enable: ::std::os::raw::c_int);
}
pub type openconnect_stats_vfn = ::std::option::Option<
    unsafe extern "C" fn(privdata: *mut ::std::os::raw::c_void, stats: *const oc_stats),
>;
extern "C" {
    pub fn openconnect_set_stats_handler(
        vpninfo: *mut openconnect_info,
        stats_handler: openconnect_stats_vfn,
    );
}
extern "C" {
    pub fn openconnect_has_pkcs11_support() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_has_tss_blob_support() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_has_tss2_blob_support() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_has_stoken_support() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_has_oath_support() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_has_yubioath_support() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_has_system_key_support() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_get_supported_protocols(
        protos: *mut *mut oc_vpn_proto,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openconnect_free_supported_protocols(protos: *mut oc_vpn_proto);
}
extern "C" {
    pub fn openconnect_get_protocol(
        vpninfo: *mut openconnect_info,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn openconnect_set_protocol(
        vpninfo: *mut openconnect_info,
        protocol: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    _unused: [u8; 0],
}
pub type openconnect_getaddrinfo_vfn = ::std::option::Option<
    unsafe extern "C" fn(
        privdata: *mut ::std::os::raw::c_void,
        node: *const ::std::os::raw::c_char,
        service: *const ::std::os::raw::c_char,
        hints: *const addrinfo,
        res: *mut *mut addrinfo,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn openconnect_override_getaddrinfo(
        vpninfo: *mut openconnect_info,
        gai_fn: openconnect_getaddrinfo_vfn,
    );
}
pub type openconnect_setup_tun_vfn =
    ::std::option::Option<unsafe extern "C" fn(privdata: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn openconnect_set_setup_tun_handler(
        vpninfo: *mut openconnect_info,
        setup_tun: openconnect_setup_tun_vfn,
    );
}
pub type openconnect_reconnected_vfn =
    ::std::option::Option<unsafe extern "C" fn(privdata: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn openconnect_set_reconnected_handler(
        vpninfo: *mut openconnect_info,
        reconnected_fn: openconnect_reconnected_vfn,
    );
}
pub type t_global_progress_vfn = ::std::option::Option<
    unsafe extern "C" fn(
        privdata: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn helper_format_vargs(
        privdata: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn helper_set_global_progress_vfn(cb: t_global_progress_vfn);
}
